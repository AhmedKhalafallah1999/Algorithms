Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.

Return the positive integer k. If there is no such integer, return -1.

 

Example 1:

Input: nums = [-1,2,-3,3]
Output: 3
Explanation: 3 is the only valid k we can find in the array.
Example 2:

Input: nums = [-1,10,6,7,-7,1]
Output: 7
Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.
Example 3:

Input: nums = [-10,8,6,7,-2,-3]
Output: -1
Explanation: There is no a single valid k, we return -1.
 

Constraints:

1 <= nums.length <= 1000
-1000 <= nums[i] <= 1000
nums[i] != 0
*******************************************************
/**
 * @param {number[]} nums
 * @return {number}
 */
 var partition = function(nums,s,e){

     let pivot = nums[e];
     let pIndex = s;
     for (let i=s ; i<e ; ++i){
         if (nums[i]<=pivot){
           let temp =nums[i];
			nums[i] = nums[pIndex];
			nums[pIndex] = temp;
			pIndex++;

         }
        
     }
      let temp = nums[pIndex];
         nums[pIndex] = nums[e];
         nums[e] = temp;
         return pIndex;
 }
 var quickSort = function(nums,s,e){
     if (s<e){
     const p = partition(nums,s,e);
     quickSort(nums,s,p-1);
     quickSort(nums,p+1,e);
     
     }
 }
var findMaxK = function(nums) {
    // we will use Quick Sort
    quickSort(nums,0,nums.length - 1);
    // nums.sort((a,b)=>a-b)
    let leftPoint = 0;
    let rightPoint = nums.length - 1;
    while(leftPoint<rightPoint){
        if (nums[leftPoint]===nums[rightPoint]) return -1;
        if (Math.abs(nums[leftPoint])<nums[rightPoint]){
            rightPoint--;
        } else if(Math.abs(nums[leftPoint])>nums[rightPoint]){
            leftPoint++;
        } else{
            return nums[rightPoint];
        }
    }
    return -1;
};