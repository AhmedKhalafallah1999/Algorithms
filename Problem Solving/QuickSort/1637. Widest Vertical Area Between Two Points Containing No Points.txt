Given n points on a 2D plane where points[i] = [xi, yi], Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.

 

Example 1:

â€‹
Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both the red and the blue area are optimal.
Example 2:

Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3
 

Constraints:

n == points.length
2 <= n <= 105
points[i].length == 2
0 <= xi, yi <= 109
*******************************************************
/**
 * @param {number[][]} points
 * @return {number}
 */
 var partition = function(points,s,e){
     const pivot = points[e][0];
     let pIndex = s;
     for (let i=s ; i<e ; ++i){
         if (points[i][0]<=pivot){
             [points[i], points[pIndex]] = [points[pIndex], points[i]];
            pIndex++;
         }
     }
       [points[e], points[pIndex]] = [points[pIndex], points[e]];
    return pIndex;

 }
 var quickSort = function (points,s,e){
     if (s<e){
         const p = partition(points,s,e);
         quickSort(points,s,p-1);
         quickSort(points,p+1,e);


     }
 }
var maxWidthOfVerticalArea = function(points) {
    quickSort(points,0,points.length - 1);
    // points.sort((a,b)=>a-b)
        let maxWidth = 0;

    
    for (let i=1 ; i<points.length ; ++i){
         const currentWidth = points[i][0] - points[i - 1][0];
        maxWidth = Math.max(maxWidth, currentWidth);

    }
    return maxWidth;

};