Given an integer array nums of 2n integers, group these integers into n pairs (a1, b1), (a2, b2), ..., (an, bn) such that the sum of min(ai, bi) for all i is maximized. Return the maximized sum.

 

Example 1:

Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.
Example 2:

Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.
 

Constraints:

1 <= n <= 104
nums.length == 2 * n
-104 <= nums[i] <= 104
********************************************* Solution
/**
 * Radix sort for both positive and negative numbers
 * @param {number[]} nums
 * @param {number} div
 */
var RadixSort = function(nums, div) {
    const n = nums.length;
    const cArray = Array.from({ length: 19 }, () => 0);

    // Count occurrences
    for (let i = 0; i < n; ++i) {
        cArray[Math.floor(nums[i] / div) % 10 + 9]++;
    }

    // Update count array to store cumulative count
    for (let i = 1; i < 19; ++i) {
        cArray[i] += cArray[i - 1];
    }

    const outPut = new Array(n);

    // Build the output array
    for (let i = n - 1; i >= 0; i--) {
        outPut[cArray[Math.floor(nums[i] / div) % 10 + 9] - 1] = nums[i];
        cArray[Math.floor(nums[i] / div) % 10 + 9]--;
    }

    // Copy the output array to nums
    for (let i = 0; i < n; ++i) {
        nums[i] = outPut[i];
    }
};

/**
 * Find the maximum value in the array
 * @param {number[]} nums
 * @returns {number}
 */
var findMax = function(nums) {
    let max = -10000;
    for (let i = 0; i < nums.length; ++i) {
        if (Math.abs(nums[i] )> max) {
            max =Math.abs( nums[i]);
        }
    }
    return max;
};

/**
 * Perform radix sort on the array for both positive and negative numbers
 * @param {number[]} nums
 */
var performRadixSort = function(nums) {
    const max = findMax(nums);

    // Perform radix sort for each digit place
    for (let i = 1; Math.floor(max / i) > 0; i *= 10) {
        RadixSort(nums, i);
    }
};

/**
 * Calculate the maximized sum of min(ai, bi) for all i
 * @param {number[]} nums
 * @returns {number}
 */
var arrayPairSum = function(nums) {
    performRadixSort(nums);

    let res = 0;
    for (let i = 0; i < nums.length; i += 2) {
        res += nums[i];
    }
    return res;
};